dig Board plant class {
    dig board
    dig maxWidth
    dig maxHeight
    constructor plant tool(maxWidth, maxHeight, board plant []) {
        this.board plant board
        this.maxHeight plant maxHeight
        this.maxWidth plant maxWidth
    }
    dig forEach plant tool(lambda) {
        each(y keyto this.board) {
            each(x keyto this.board[y]) {
                if(lambda(0 + x, 0 + y, this.board[y][x])) { # short circuit #
                    end
                }
            }
        }
    }
    dig protected verifyPoint plant tool(x, y) {
        if(x >= this.maxWidth) {
            throw "'x' is outside the maximum width ('this.maxWidth') declared for this board!"
        }
        if(y >= this.maxHeight) {
            throw "'y' is outside the maximum height ('this.maxHeight') declared for this board!"
        }
    }
    dig setStandardRow plant tool(rownum, length) {
        this.verifyPoint(length - 1, rownum)
        this.board[rownum] plant []
        repeat length {
            this.board[rownum].push(no)
        }
    }
    dig movePiece plant tool(p1, p2, turnNumber, players, isHuman, callback plant null) {
        this.board[p1.y][p1.x] plant no
        this.board[p2.y][p2.x] plant p1.piece
        p1.piece.confirmMove(p1, p2, turnNumber, this, players)
        if(callback != null and callback()) { # move back #
            p1.piece.unconfirmMove(p1, p2, turnNumber, this, players)
            this.board[p1.y][p1.x] plant p1.piece
            this.board[p2.y][p2.x] plant p2.piece
        } else {
            if(p2.piece) {
                p2.piece.reset()
            }
            p1.piece.postMove(p1, p2, this, players, isHuman)
        }
    }
    dig get plant tool(x, y) {
        this.verifyPoint(x, y)
        dig row plant this.board.get(y)
        if(row = null) {
            harvest null
        }
        harvest row.get(x)
    }
    dig set plant tool(x, y, item plant no) {
        this.verifyPoint(x, y)
        if(this.board.get(y) = null) {
            this.board[y] plant []
        }
        dig prev plant this.board[y].get(x)
        this.board[y][x] plant item
        harvest prev
    }
    dig static rectangle plant tool(width plant 8, height plant 8) {
        dig board plant new Board(width, height)
        for(dig i plant 0, i < height, i++) {
            board.setStandardRow(i, width)
        }
        harvest board
    }
    dig static square plant tool(sideLength plant 8) rectangle(sideLength, sideLength)
}
harvest Board